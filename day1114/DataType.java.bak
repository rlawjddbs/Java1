/*
기본형 데이터형
	정수형 : byte, short, int, long
	문자형 : char
	실수형 : float, double
	불린형 : boolean
*/
class DataType{
	public static void main(String[] args) {
		//정수형
		byte a=10;			// byte는 -128 ~ 127 의 저장 범위를 가지고 있음
		short b=20;			
		int c=30;
		long d=40; //할당되는 값이 4byte내 이므로 literal을 변환할 필요가 없다.
		long e=2147483647;	// int형 리터럴은 -2147483648 ~ 2147483647 까지의 저장범위를 가지고 있다.
		// long f=2147483648L;		// 2147483647 이상의 리터럴을 할당하기 위해서는 long형의 리터럴을 사용해야 하며 접미사로 대문자 L, 혹은 소문자 l을 사용한다.

		System.out.println("byte : "+ a +", short : " + b + ", int : " + c + ", long : " + d + ", " + e);

		//문자형 : unicode 값 : \u0000
		// char f='A'; // 할당 unicode
		char f=66; // unicode값을 10진수로 할당가능.
		char g='0';
		char h='가';
		//출력 : unicode에 대한 문자 출력
		System.out.println("char : " + f + ", " + g + ", " + h);

		//실수
		float i=3.14F; //형명시 필요함 - 실수 literal은 8byte이고 float 데이터형은 4byte 이므로 값 할당이 되지 않는다.
		// 데이터형은 float(4byte)인데 할당되는 리터럴은 접미사가 없는 실수이므로 double형 리터럴이다. 리터럴의 접미사로 f 나 F를 붙여 float형으로 바꿔줘야 정상 할당된다.
		double j=3.14; //리터럴과 데이터형이 같으므로 형명시 생략할 수 있다. (실수 리터럴은 접미사가 없을 경우 알아서 double형으로 간주한다.)
		double k=3.14D; // double형 리터럴은 접미사 d를 생략할 수도 있고, 그냥 써도 된다.

		System.out.println("float : " + i + ", double : " + j + ", " + k);
		
		//불린형
		boolean l = true;
		boolean m = false;
		System.out.println("boolean : " + l + ", " + m);

	}//main
}//class
